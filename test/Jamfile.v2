#  (C) Copyright Gennadiy Rozental 2001-2014.
#  Use, modification, and distribution are subject to the 
#  Boost Software License, Version 1.0. (See accompanying file 
#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
#  See http://www.boost.org/libs/test for the library home page.


project
    : requirements
    ;


rule test-btl-lib ( test-rule : test-name : lib-name ? : pattern_file * : source_files * : extra-libs ? : extra-options ? )
{
   source_files ?= $(test-name).cpp ;
   return [ $(test-rule) $(source_files) ../build//$(lib-name) $(extra-libs)
            : #args
            : $(pattern_file)
            : #<stlport-iostream>on 
              # Activating -pedantic finds more gotchas
              # Unfortunately, this warns about the use of "long long" in gcc's own stdlib
              # So deactivate those warnings again
              <toolset>gcc:<cxxflags>-pedantic
              <toolset>gcc:<cxxflags>-Wno-long-long
              <toolset>borland:<cxxflags>-w-8080
              <toolset>borland:<cxxflags>-w-8084
              <toolset>msvc-8.0:<define>_SCL_SECURE_NO_DEPRECATE
              <toolset>clang:<cxxflags>-Wno-c99-extensions
              <toolset>clang:<cxxflags>-Wno-variadic-macros
              <warnings>all
              $(extra-options)
            : $(test-name)
          ] ;
}

rule test-btl-lib-c11 ( test-rule : test-name : lib-name ? : pattern_file * : source_files * : extra-libs ? : extra-options ? )
{
   source_files ?= $(test-name).cpp ;
   return [ $(test-rule) $(source_files) ../build//$(lib-name) $(extra-libs)
            : #args
            : $(pattern_file)
            : #<stlport-iostream>on 
              # Activating -pedantic finds more gotchas
              # Unfortunately, this warns about the use of "long long" in gcc's own stdlib
              # So deactivate those warnings again
              <toolset>gcc:<cxxflags>-pedantic
              <toolset>gcc:<cxxflags>-Wno-long-long
              #<toolset>gcc:<cxxflags>-std=gnu++0x
              <toolset>gcc-4.4:<cxxflags>-std=c++0x
              <toolset>gcc-4.5:<cxxflags>-std=c++0x
              <toolset>gcc-4.6:<cxxflags>-std=c++0x
              <toolset>gcc-4.7:<cxxflags>-std=c++11
              <toolset>gcc-4.8:<cxxflags>-std=c++11
              <toolset>gcc-4.9:<cxxflags>-std=c++11
              <toolset>borland:<cxxflags>-w-8080
              <toolset>borland:<cxxflags>-w-8084
              <toolset>msvc-8.0:<define>_SCL_SECURE_NO_DEPRECATE
              <toolset>clang:<cxxflags>-Wno-c99-extensions
              <toolset>clang:<cxxflags>-Wno-variadic-macros
              <toolset>clang:<cxxflags>-std=c++11
              <toolset>clang-3.0:<define>BOOST_NO_CXX11_ALLOCATOR
              <warnings>all
              $(extra-options)
            : $(test-name)
          ] ;
}

rule test-btl-lib-mt ( test-rule : test-name : lib-name ? : pattern_file * : source_files * : extra-libs ? )
{
   source_files ?= $(test-name).cpp ;

   return [ $(test-rule) $(source_files) ../build//$(lib-name) $(extra-libs)
            : #args
            : $(pattern_file)
            : #<stlport-iostream>on 
              # Activating -pedantic finds more gotchas
              # Unfortunately, this warns about the use of "long long" in gcc's own stdlib
              # So deactivate those warnings again
              <toolset>gcc:<cxxflags>-pedantic
              <toolset>gcc:<cxxflags>-Wno-long-long
              <toolset>borland:<cxxflags>-w-8080
              <toolset>msvc-6.5:<link>static
              <toolset>msvc-8.0:<define>_SCL_SECURE_NO_DEPRECATE
              #<toolset>gcc:<cxxflags>-std=gnu++0x
              <toolset>gcc-4.5:<cxxflags>-std=gnu++0x
              <toolset>gcc-4.7:<cxxflags>-std=gnu++11
              <toolset>clang:<cxxflags>-Wno-c99-extensions
              <toolset>clang:<cxxflags>-Wno-variadic-macros              
              <define>BOOST_TEST_NO_AUTO_LINK=1 # requirements
              <threading>multi
              <warnings>all
            : $(test-name)
          ] ;
}

test-suite "basics_test"
        :
          [ test-btl-lib run : class_properties_test : boost_unit_test_framework ]
          [ test-btl-lib run : basic_cstring_test    : boost_unit_test_framework/<link>static ]
        ;

test-suite "prg_exec_monitor_test"
        : [ test-btl-lib run-fail : prg_exec_fail1 : included ]
          [ test-btl-lib run-fail : prg_exec_fail2 : boost_prg_exec_monitor/<link>static ]
          [ test-btl-lib run-fail : prg_exec_fail3 : boost_prg_exec_monitor/<link>static ]
          [ test-btl-lib run-fail : prg_exec_fail4 : boost_prg_exec_monitor/<link>static ]
        ;

test-suite "unit_test_framework_test"
        :
          # warning: sending all the test pattern files on the command line
          # this allows some runners with cross compilation to send the pattern files as well
          [ test-btl-lib run : errors_handling_test         : boost_unit_test_framework : test_files/errors_handling_test.pattern 
                                                                                          test_files/errors_handling_test.pattern2 ]
          [ test-btl-lib run : single_header_test ]
          [ test-btl-lib-c11 run : test_collection_comparison : boost_unit_test_framework ]
          [ test-btl-lib run-fail : minimal_test ]
          [ test-btl-lib run : foreach_test ]
          [ test-btl-lib run : test_windows_headers         : boost_unit_test_framework ]
          [ test-btl-lib run : output_test_stream_test      : boost_unit_test_framework ]
          [ test-btl-lib run : result_report_test           : boost_unit_test_framework : test_files/result_report_test.pattern ]
          [ test-btl-lib run : parameterized_test_test      : boost_unit_test_framework ]
          [ test-btl-lib run : test_fp_comparisons          : boost_unit_test_framework ]
          [ test-btl-lib-c11 run : test_fp_comparisons_new_api : boost_unit_test_framework : : test_fp_comparisons.cpp ]
          [ test-btl-lib run : test_tools_test              : boost_unit_test_framework : test_files/test_tools_test.pattern ]
          [ test-btl-lib run : test_case_template_test      : boost_unit_test_framework ]
          [ test-btl-lib run : custom_exception_test        : boost_unit_test_framework/<link>static ]
          [ test-btl-lib run : fixed_mapping_test           : boost_unit_test_framework ]
          [ test-btl-lib run : ifstream_line_iterator_test  : boost_unit_test_framework : test_files/ifstream_line_iterator.tst1 
                                                                                          test_files/ifstream_line_iterator.tst2 ]
          [ test-btl-lib run : algorithms_test              : boost_unit_test_framework/<link>static ]
          [ test-btl-lib run : token_iterator_test          : boost_unit_test_framework ]
          [ test-btl-lib run : boost_check_equal_str        : boost_unit_test_framework ]
          [ test-btl-lib run : test_tree_management_test    : boost_unit_test_framework ]
          [ test-btl-lib run : run_by_name_label_test       : boost_unit_test_framework/<link>static ]
          [ test-btl-lib run : test_assertion_construction  : boost_unit_test_framework/<link>static ]
          [ test-btl-lib run : test_datasets                : boost_unit_test_framework : : [ glob test_datasets_src/*.cpp ] : ]
          [ test-btl-lib-c11 run : test_datasets_cxx11      : boost_unit_test_framework : : [ glob test_datasets_src/*.cpp ] : ]
          
          # [ test-btl-lib run : config_file_iterator_test    : boost_unit_test_framework/<link>static ]
          # [ test-btl-lib run : config_file_test             : boost_unit_test_framework/<link>static ]

          # tests disabling the printing of special types, also in collections / trac 9390 
          [ test-btl-lib run : test_dont_print_log_value    : boost_unit_test_framework ]

          # test for multiprecision / trac 11054
          [ test-btl-lib run      : test_fp_multiprecision_close_fraction : boost_unit_test_framework : : 
              test_fp_multiprecision_close_fraction.cpp ]
          [ test-btl-lib-c11 run  : test_fp_multiprecision_close_fraction_new_api : boost_unit_test_framework  : : 
              test_fp_multiprecision_close_fraction.cpp ]
              
              
          # examples in datasets
          [ test-btl-lib-c11 run-fail  : dataset_example59 : : : ../doc/examples/dataset_example59.cpp ]
          [ test-btl-lib-c11 run       : dataset_example61 : : : ../doc/examples/dataset_example61.cpp ]
          [ test-btl-lib-c11 run       : dataset_example62 : : : ../doc/examples/dataset_example62.cpp ]
          [ test-btl-lib-c11 run-fail  : dataset_example63 : : : ../doc/examples/dataset_example63.cpp ]
          [ test-btl-lib-c11 run-fail  : dataset_example64 : : : ../doc/examples/dataset_example64.cpp ]
          [ test-btl-lib-c11 run       : dataset_example65 : : : ../doc/examples/dataset_example65.cpp ]
          [ test-btl-lib-c11 run       : dataset_example66 : : : ../doc/examples/dataset_example66.cpp ]
          [ test-btl-lib-c11 run       : dataset_example67 : : : ../doc/examples/dataset_example67.cpp ]
          [ test-btl-lib-c11 run-fail  : dataset_example68 : : : ../doc/examples/dataset_example68.cpp ]
          
          # examples in BOOST_TEST
          [ test-btl-lib-c11 run       : boost_test_macro1                  : : : ../doc/examples/boost_test_macro1.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro2                  : : : ../doc/examples/boost_test_macro2.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_bitwise           : : : ../doc/examples/boost_test_macro_bitwise.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_container_c_array : : : ../doc/examples/boost_test_macro_container_c_array.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_container_float   : : : ../doc/examples/boost_test_macro_container_float.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_container_value_type : : : ../doc/examples/boost_test_macro_container_value_type.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_float             : : : ../doc/examples/boost_test_macro_float.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_float2            : : : ../doc/examples/boost_test_macro_float2.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_message           : : : ../doc/examples/boost_test_macro_message.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_sequence          : : : ../doc/examples/boost_test_macro_sequence.cpp ]
          [ test-btl-lib-c11 run       : boost_test_macro_string            : : : ../doc/examples/boost_test_macro_string.cpp ]

          

          
                    
        ;
        
        

test-suite "multithreaded_test"
        :
          [ test-btl-lib-mt run : sync_access_test          : boost_unit_test_framework/<link>static : : : /boost/thread//boost_thread/<link>static ]
        ;

# A target that runs all the tests 
alias test : basics_test prg_exec_monitor_test unit_test_framework_test ; 
  
# Only run tests when explicitly requested 
# explicit test basics_test prg_exec_monitor_test unit_test_framework_test ;
