#  (C) Copyright Gennadiy Rozental 2001-2015.
#  Use, modification, and distribution are subject to the
#  Boost Software License, Version 1.0. (See accompanying file
#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
#  See http://www.boost.org/libs/test for the library home page.

import ../../config/checks/config : requires ;

project
    : requirements
    ;

#_________________________________________________________________________________________________#

rule boost.test-self-test ( test-rule : test-suite : test-name : usage-variant ? : pattern_file * : source_files * : extra-libs ? : extra-options ? )
{
    source_files ?= $(test-suite)/$(test-name).cpp ;
    usage-variant ?= boost_unit_test_framework/<link>static ;

    return [ $(test-rule) $(source_files) ../build//$(usage-variant) $(extra-libs)
             : #args
             : $(pattern_file)
             : # Activating -pedantic finds more gotchas
               # Unfortunately, this warns about the use of "long long" in gcc's own stdlib
               # So deactivate those warnings again
               <toolset>gcc:<cxxflags>-pedantic
               <toolset>gcc:<cxxflags>-Wno-long-long
               <toolset>gcc:<cxxflags>-std=c++11
               <toolset>clang:<cxxflags>-Wno-c99-extensions
               <toolset>clang:<cxxflags>-std=c++11
               <warnings>all
               $(extra-options)
             : $(test-name)
           ] ;
}

#_________________________________________________________________________________________________#

rule boost.test-mt-test ( test-rule : test-suite : test-name : usage-variant ? : pattern_file * : source_files * : extra-libs ? )
{
    return [ boost.test-self-test $(test-rule)
             : $(test-suite) 
             : $(test-name) 
             : $(usage-variant) 
             : $(pattern_file)
             : $(source_files)
             : $(extra-libs)
             : <threading>multi 
           ] ;
}

#_________________________________________________________________________________________________#

rule boost.test-example-as-test ( test-rule : test-name : extra_options ? )
{
    return [ boost.test-self-test $(test-rule)  : ../doc/examples : doc_$(test-name) : included : : ../doc/examples/$(test-name).cpp : : $(extra_options) ] ;
}

#_________________________________________________________________________________________________#

test-suite "utils-ts"
:
  [ boost.test-self-test run : utils-ts : class_properties_test ]
  [ boost.test-self-test run : utils-ts : basic_cstring_test ]
  [ boost.test-self-test run : utils-ts : ifstream_line_iterator_test : : inputs/ifstream_line_iterator.tst1
                                                                          inputs/ifstream_line_iterator.tst2 ]
  # [ boost.test-self-test run : utils-ts : config_file_iterator_test ]
  # [ boost.test-self-test run : utils-ts : config_file_test ]
  [ boost.test-self-test run : utils-ts : fixed_mapping_test ]
  [ boost.test-self-test run : utils-ts : algorithm_test ]
  [ boost.test-self-test run : utils-ts : token_iterator_test ]
  [ boost.test-self-test run : utils-ts : foreach_test : included ]
;

#_________________________________________________________________________________________________#

test-suite "usage-variants-ts"
:
  [ boost.test-self-test run : usage-variants-ts : single_header_test : included ]
  # !! two others
;

#_________________________________________________________________________________________________#

test-suite "framework-ts"
:
  [ boost.test-self-test run : framework-ts : result_report_test : : baseline-outputs/result_report_test.pattern ]
  [ boost.test-self-test run : framework-ts : run_by_name_label_test ]
;

#_________________________________________________________________________________________________#

test-suite "writing-test-ts"
:
  [ boost.test-self-test run : writing-test-ts : boost_check_equal_str ]
  [ boost.test-self-test run : writing-test-ts : output_test_stream_test ]
  [ boost.test-self-test run : writing-test-ts : test_assertion_construction ]
  [ boost.test-self-test run : writing-test-ts : test_collection_comparison  ]
  [ boost.test-self-test run : writing-test-ts : test_fp_comparisons ]
  [ boost.test-self-test run : writing-test-ts : test_fp_multiprecision_close_fraction ]
  [ boost.test-self-test run : writing-test-ts : test_tools_test : : baseline-outputs/test_tools_test.pattern ]
  [ boost.test-self-test run : writing-test-ts : test_windows_headers ]
  [ boost.test-self-test run : writing-test-ts : test_dont_print_log_value ]
;

#_________________________________________________________________________________________________#

test-suite "test-organization-ts"
:
  [ boost.test-self-test run : test-organization-ts : parameterized_test_test ]
  [ boost.test-self-test run : test-organization-ts : test_case_template_test ]
  [ boost.test-self-test run : test-organization-ts : datasets-test : : : [ glob test-organization-ts/datasets-test/*.cpp ] ]
  [ boost.test-self-test run : test-organization-ts : test_unit_order_test ]
  [ boost.test-self-test run : test-organization-ts : test_tree_management_test ]
;

#_________________________________________________________________________________________________#

test-suite "multithreading-ts"
:
  [ boost.test-mt-test run : multithreading-ts : sync_access_test : : : : /boost/thread//boost_thread/<link>static ]
;

#_________________________________________________________________________________________________#

test-suite "prg_exec_monitor-ts"
: [ boost.test-self-test run-fail : prg_exec_monitor-ts : prg_exec_fail1 : included ]
  [ boost.test-self-test run-fail : prg_exec_monitor-ts : prg_exec_fail2 : boost_prg_exec_monitor/<link>static ]
  [ boost.test-self-test run-fail : prg_exec_monitor-ts : prg_exec_fail3 : boost_prg_exec_monitor/<link>static ]
  [ boost.test-self-test run-fail : prg_exec_monitor-ts : prg_exec_fail4 : boost_prg_exec_monitor/<link>static ]
;

#_________________________________________________________________________________________________#

test-suite "execution_monitor-ts"
    :
      [ boost.test-self-test run : execution_monitor-ts : errors_handling_test : : baseline-outputs/errors_handling_test.pattern
                                                                                   baseline-outputs/errors_handling_test.pattern2 ]
      [ boost.test-self-test run : execution_monitor-ts : custom_exception_test ]
    ;

#_________________________________________________________________________________________________#

test-suite "dataset-examples-ts"
        :
          [ boost.test-example-as-test run-fail : dataset_example59 ]
          [ boost.test-example-as-test run      : dataset_example61 ]
          [ boost.test-example-as-test run      : dataset_example62 ]
          [ boost.test-example-as-test run-fail : dataset_example63 ]
          [ boost.test-example-as-test run-fail : dataset_example64 ]
          [ boost.test-example-as-test run      : dataset_example65 ]
          [ boost.test-example-as-test run      : dataset_example66 ]
          [ boost.test-example-as-test run      : dataset_example67 ]
          [ boost.test-example-as-test run-fail : dataset_example68 ]
        ;

#_________________________________________________________________________________________________#

test-suite "BOOST_TEST-examples-ts"
        :
          [ boost.test-example-as-test run-fail : boost_test_macro_overview          ]
          [ boost.test-example-as-test run      : boost_test_macro_workaround        ]
          [ boost.test-example-as-test run-fail : boost_test_macro2                  ]
          [ boost.test-example-as-test run-fail : boost_test_macro3                  ]
          [ boost.test-example-as-test run-fail : tolerance_01 : [ requires cxx11_variadic_macros ] ]
          [ boost.test-example-as-test run-fail : tolerance_02 : [ requires cxx11_variadic_macros ] ]
          [ boost.test-example-as-test run-fail : tolerance_03 : [ requires cxx11_variadic_macros ] ]
          [ boost.test-example-as-test run-fail : tolerance_04 : [ requires cxx11_variadic_macros ] ]
          [ boost.test-example-as-test run-fail : boost_test_message                 ]
          [ boost.test-example-as-test run-fail : boost_test_string                  ]
          [ boost.test-example-as-test run-fail : boost_test_bitwise                 ]
        ;

#_________________________________________________________________________________________________#

test-suite "container-comparison-examples-ts"
        :
          [ boost.test-example-as-test run-fail : boost_test_container_default       ]
          [ boost.test-example-as-test run-fail : boost_test_sequence_per_element    ]
          [ boost.test-example-as-test run-fail : boost_test_container_lex           ]
          [ boost.test-example-as-test run-fail : boost_test_macro_container_c_array ]
        ;

#_________________________________________________________________________________________________#

# A target that runs all the tests
alias test 
:   utils-ts
    usage-variants-ts
    framework-ts
    writing-test-ts
    test-organization-ts
    multithreading-ts
    prg_exec_monitor-ts
    execution_monitor-ts
    dataset-examples-ts
    BOOST_TEST-examples-ts
    container-comparison-examples-ts
;

#_________________________________________________________________________________________________#

# EOF
