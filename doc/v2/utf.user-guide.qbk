[section:users_guide Building a test module with the __UTF__]

[/ ######################################################## ]
[include compilation/module_initialization.qbk]


[/ ######################################################## ]
[section:usage_variants Linking with the __UTF__]

The __UTF__ presents you with 4 different variants how it can be used.

# The static library variant
# The dynamic library variant
# The single-header variant
# The external test runner variant

Unlike the Buridan's donkey though, you shouldn't have problems deciding which one to use, since there are
clear reasons why would you prefer each one.

In most cases to compile a test module based on the __UTF__ all you need to include is just the [headerref boost/test/unit_test.hpp single header]

``
  #include <boost/test/unit_test.hpp>
``

This header includes internally most of the other headers that contains the __UTF__ definitions. Some advanced features, 
like the floating point comparison or the logged expectations testing, are defined in independent headers and need to be included explicitly.

[include compilation/variant_static_lib.qbk]
[include compilation/variant_dynamic_lib.qbk]
[include compilation/variant_single_header.qbk]
[include compilation/variant_external_runner.qbk]

[endsect] [/section:usage_variants]




[/ ######################################################## ]
[/ reference of the macros]
[include compilation/link_reference.qbk]



[endsect] [/section:users_guide]
