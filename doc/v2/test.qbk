[/
 / Copyright (c) 2003-2013 Gennadiy Rozental (rogeeff at gmail dot com)
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[library Boost.Test
    [quickbook 1.6]
    [copyright 2001 - 2014 Gennadiy Rozental]
    [id boost_test]
    [purpose Testing library]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [authors [Rozental, Gennadiy]]
    [category Correctness and testing]
]

[/ email Gennadiy, I do not know how to make this in fact]
[def __email_gr__ [@mailto:boost-test=at=emailaccount-dot-com Gennadiy Rozental]]


[template mdash[] '''&mdash; ''']
[template indexterm1[term1] '''<indexterm><primary>'''[term1]'''</primary></indexterm>''']
[template indexterm2[term1 term2] '''<indexterm><primary>'''[term1]'''</primary><secondary>'''[term2]'''</secondary></indexterm>''']
[template ticket[number]'''<ulink url="https://svn.boost.org/trac/boost/ticket/'''[number]'''">'''#[number]'''</ulink>''']
[def __POSIX__ /POSIX/]
[def __Windows__ /Windows/]
[def __UTF__ /UTF/]
[def __IEEE754__ [*IEEE754]]
[def __PEM__     ['PEM]]
[def __EM__      [link ref_execution_monitor ['EM]]]
[def __MTF__     ['Minimal Testing Facility]]

[/<link linkend="utf.user-guide.testing-tools">testing tools</link>]
[def __testing_tools__ [*testing tools]]
[def __runtime_configuration__ [link ref_section_runtime_configuration runtime configuration]]
[def __output_stream_testing_tool__ [link ref_test_output_streams output streams]]
[def __part_glossary__                [link boost_test.section_glossary Glossary]]
[def __part_faq__                     [link boost_test.section_faq FAQ]]

[/ to be replaced by the proper link]
[/ currently replace <xref linkend="utf.flag.alt-init-api" endterm="utf.flag.alt-init-api"/> ]
[def __BOOST_TEST_ALTERNATIVE_INIT_API__ `BOOST_TEST_ALTERNATIVE_INIT_API`]
[def __dynamic_linking__ [*dynamic linking]]
[def __auto_linking__ [link ref_pem_auto_link automatic linking]]


[/ to be replaced by the proper link]
[/ currently replace <xref linkend="utf.flag.dyn-link" endterm="utf.flag.dyn-link"/> ]
[def __BOOST_TEST_DYN_LINK__   [link ref_BOOST_TEST_DYN_LINK `BOOST_TEST_DYN_LINK`]]
[def __BOOST_TEST_NO_LIB__     [link ref_BOOST_TEST_NO_LIB `BOOST_TEST_NO_LIB`]]

[def __BOOST_TEST_MODULE__     [link ref_BOOST_TEST_MODULE `BOOST_TEST_MODULE`]]



[def __BOOST_TEST_CHECKPOINT__ [link ref_BOOST_TEST_CHECKPOINT `BOOST_TEST_CHECKPOINT`]]
[def __BOOST_TEST_PASSPOINT__  [link ref_BOOST_TEST_PASSPOINT `BOOST_TEST_PASSPOINT`]]
[def __BOOST_TEST_MESSAGE__    [link ref_macro_boost_test_message `BOOST_TEST_MESSAGE`]]


[/ Assertions ]
[def __BOOST_LEVEL__           [link ref_BOOST_level `BOOST_<level>`]]
[def __BOOST_LEVEL_MESSAGE__   [link ref_BOOST_level_MESSAGE `BOOST_<level>_MESSAGE`]]
[def __BOOST_LEVEL_EQUAL__     [link ref_BOOST_level_EQUAL `BOOST_<level>_EQUAL`]]
[def __BOOST_LEVEL_PREDICATE__ [link ref_BOOST_level_PREDICATE `BOOST_<level>_PREDICATE`]]
[def __BOOST_LEVEL_EQUAL_COLLECTIONS__ [link ref_BOOST_level_EQUAL_COLLECTIONS `BOOST_<level>_EQUAL_COLLECTIONS`]]
[def __BOOST_LEVEL_NE__        [link ref_BOOST_level_NE `BOOST_<level>_NE`]]
[def __BOOST_LEVEL_GE__        [link ref_BOOST_level_GE `BOOST_<level>_GE`]]
[def __BOOST_LEVEL_GT__        [link ref_BOOST_level_GT `BOOST_<level>_GT`]]
[def __BOOST_LEVEL_LE__        [link ref_BOOST_level_LE `BOOST_<level>_LE`]]
[def __BOOST_LEVEL_LT__        [link ref_BOOST_level_LT `BOOST_<level>_LT`]]

[def __BOOST_LEVEL_NO_THROW__  [link ref_BOOST_level_NO_THROW `BOOST_<level>_NO_THROW`]]
[def __BOOST_LEVEL_THROW__     [link ref_BOOST_level_THROW `BOOST_<level>_THROW`]]
[def __BOOST_LEVEL_EXCEPTION__ [link ref_BOOST_level_EXCEPTION `BOOST_<level>_EXCEPTION`]]

[def __BOOST_LEVEL_BITWISE_EQUAL__ [link ref_BOOST_level_BITWISE_EQUAL `BOOST_<level>_BITWISE_EQUAL`]]
[def __BOOST_ERROR__           [link ref_BOOST_ERROR `BOOST_ERROR`]]
[def __BOOST_FAIL__            [link ref_BOOST_FAIL `BOOST_FAIL`]]
[def __BOOST_IS_DEFINED__      [link ref_BOOST_IS_DEFINED `BOOST_IS_DEFINED`]]

[def __BOOST_CHECK__           [link ref_BOOST_level `BOOST_CHECK`]]
[def __BOOST_REQUIRE__         [link ref_BOOST_level `BOOST_REQUIRE`]]
[def __BOOST_CHECK_MESSAGE__   `BOOST_CHECK_MESSAGE`]

[def __BOOST_WARN_EQUAL__      [link ref_BOOST_level_EQUAL `BOOST_WARN_EQUAL`]]
[def __BOOST_CHECK_EQUAL__     [link ref_BOOST_level_EQUAL `BOOST_CHECK_EQUAL`]]
[def __BOOST_REQUIRE_EQUAL__   [link ref_BOOST_level_EQUAL `BOOST_REQUIRE_EQUAL`]]

[def __BOOST_CHECK_PREDICATE__ __BOOST_LEVEL_PREDICATE__]

[/ Assertions / floating point]
[def __BOOST_LEVEL_SMALL__     [link ref_BOOST_level_SMALL `BOOST_<level>_SMALL`]]
[def __BOOST_CHECK_SMALL__     __BOOST_LEVEL_SMALL__]
[def __BOOST_LEVEL_CLOSE__     [link ref_BOOST_level_CLOSE `BOOST_<level>_CLOSE`]]
[def __BOOST_CHECK_CLOSE__     __BOOST_LEVEL_CLOSE__]
[def __BOOST_LEVEL_CLOSE_FRACTION__ [link ref_BOOST_level_CLOSE_FRACTION `BOOST_<level>_CLOSE_FRACTION`]]

[/ Tests cases]
[def __BOOST_AUTO_TEST_CASE__                 [link ref_BOOST_AUTO_TEST_CASE `BOOST_AUTO_TEST_CASE`]]
[def __BOOST_TEST_CASE__                      [link ref_BOOST_TEST_CASE `BOOST_TEST_CASE`]]
[def __BOOST_AUTO_TEST_CASE_TEMPLATE__        [link ref_BOOST_AUTO_TEST_CASE_TEMPLATE `BOOST_AUTO_TEST_CASE_TEMPLATE`]]
[def __BOOST_TEST_CASE_TEMPLATE__             [link ref_BOOST_TEST_CASE_TEMPLATE `BOOST_TEST_CASE_TEMPLATE`]]
[def __BOOST_TEST_CASE_TEMPLATE_FUNCTION__    [link ref_BOOST_TEST_CASE_TEMPLATE `BOOST_TEST_CASE_TEMPLATE_FUNCTION`]]
[def __BOOST_PARAM_TEST_CASE__                [link ref_BOOST_PARAM_TEST_CASE `BOOST_PARAM_TEST_CASE`]]

[def __BOOST_AUTO_TEST_SUITE__                [link ref_BOOST_AUTO_TEST_SUITE `BOOST_AUTO_TEST_SUITE`]]
[def __BOOST_AUTO_TEST_SUITE_END__            [link ref_BOOST_AUTO_TEST_SUITE `BOOST_AUTO_TEST_SUITE_END`]] [/ shares the link with the test suite declaration]
[def __BOOST_TEST_SUITE__                     [link ref_BOOST_TEST_SUITE `BOOST_TEST_SUITE`]]
[def __BOOST_AUTO_TEST_CASE_EXPECTED_FAILURES__ [link ref_BOOST_AUTO_TEST_CASE_EXPECTED_FAILURES `BOOST_AUTO_TEST_CASE_EXPECTED_FAILURES`]]

[/ fixtures]
[def __BOOST_FIXTURE_TEST_CASE__              [link ref_fixture_test_case `BOOST_FIXTURE_TEST_CASE`]]
[def __BOOST_FIXTURE_TEST_SUITE__             [link ref_fixture_test_suite `BOOST_FIXTURE_TEST_SUITE`]]
[def __BOOST_GLOBAL_FIXTURE__                 [link ref_fixture_test_global `BOOST_GLOBAL_FIXTURE`]]

[/ log]
[def __BOOST_TEST_LOG_LEVEL__    [link ref_param_log_level `BOOST_TEST_LOG_LEVEL`]] [/ this is an environment variable]



[/ runtime/cla parameters]
[def __param_show_progress__          [link ref_param_show_progress `show_progress`]]
[def __param_log_level__              [link ref_param_log_level `log_level`]]
[def __param_output_format__          [link ref_param_output_format `output_format`]]
[def __param_log_format__             [link ref_param_log_format `log_format`]]
[def __param_run_test__               [link ref_param_run_test `run_test`]]
[def __param_report_level__           [link ref_param_report_level `report_level`]]
[def __param_report_format__          [link ref_param_report_format `report_format`]]
[def __param_catch_system__           [link ref_param_catch_system `catch_system_error`]]
[def __param_result_code__            [link ref_param_result_code `result_code`]]
[def __param_build_info__             [link ref_param_build_info `build_info`]]
[def __param_auto_start_dbg__         [link ref_param_auto_dbg `auto_start_dbg`]]
[def __param_break_exec_path__        [link ref_param_break_exe_path `break_exec_path`]]
[def __param_param_color_output__     [link ref_param_color_output `color_output`]]
[def __param_random__                 [link ref_param_random `random`]]
[def __param_detect_memory_leaks__    [link ref_param_detect_memory_leaks `detect_memory_leaks`]]
[def __param_use_alt_stack__          [link ref_param_use_alt_stack `use_alt_stack`]]
[def __param_detect_fp_exceptions__   [link ref_param_detect_fp_exceptions `detect_fp_exceptions`]]
[def __param_log_sink__               [link ref_param_log_sink `log_sink`]]
[def __param_report_sink__            [link ref_param_report_sink `report_sink`]]
[def __param_save_pattern__           [link ref_param_save_patterm `save_patterm`]]



[/=============================================================================]



[/ this is the introduction that appears on the first page of the documentation]
[include forewords.qbk]


[include overview.qbk]

[include tutorial.qbk]
[include utf.user-guide.qbk]
[include utf.user-guide.test-organization.qbk]

[include utf.testing-tools.qbk]
[include utf.user-guide.fixture.qbk]
[include utf.user-guide.test-output.qbk]
[include utf.user-guide.test-progress.qbk]

[/ Raffi: I think it would be better to put this in test variants]
[include minimal-testing.qbk]

[include runtime_configuration.qbk]

[include usage_recommandations.qbk]
[include faq.qbk]
[include glossary.qbk]

[include portability.qbk]
[include open_issues.qbk]
[include release_notes.qbk]
[include acknowledgments.qbk]

