[section:test_organization_nullary Non-parameterized test cases]

The most widely used are test cases based on a nullary function. These include nullary free functions, nullary
function objects created with `boost::bind` and nullary `boost::function`
instances. The simplest is a free function and the __UTF__ provides facilities to create a free function based test
case that is automatically registered. Here are the two construction interfaces:

* Test case with automated registration
* Manually registered test case
 
 
[#ref_BOOST_AUTO_TEST_CASE][h4 Automated registration]

To create a nullary free function cased test case, which is registered in place of implementation, employ the
macro __BOOST_AUTO_TEST_CASE__.
 
``
  __BOOST_AUTO_TEST_CASE__(test_case_name);
``

The macro is designed to closely mimic nullary free function syntax. Changes that are required to make an
existing test case, implemented as a free function, registered in place are illustrated in the following
example (compare with [link ref_bt_example01 manual registration]):

[bt_example example06..Nullary function based test case with automated registration]

With this macro you don't need to implement the initialization function at all. The macro creates and
registers the test case with the name `free_test_function` automatically.

[#ref_BOOST_TEST_CASE][h4 Manual registration]

To create a test case manually, employ the macro __BOOST_TEST_CASE__:

``
  BOOST_TEST_CASE(test_function);
``


__BOOST_TEST_CASE__ creates an instance of the class `boost::unit_test::test_case` and returns a pointer to the
constructed instance. The test case name is deduced from the macro argument test_function. If you prefer to
assign a different test case name, you have to use the underlying make_test_case interface instead. To
register a new test case, employ the method `test_suite::add`. Both test case creation and registration are
performed in the test module initialization function.


Here is the simplest possible manually registered test case. This example employs the original test module
initialization function specification. A single test case is created and registered in the master test suite.
Note that the free function name is passed by address to the macro __BOOST_TEST_CASE__`.

[#ref_bt_example01]
[bt_example example01..Nullary free function manually registered]

A test case can be implemented as a method of a class. In this case a pointer to the class instance has to be
bound to the test method to create a test case. You can use the same instance of the class for multiple test
cases. The __UTF__ doesn't take an ownership of the class instance and you are required to manage the class
instance lifetime yourself.

[warning
 The class instance can't be defined in the initialization function scope, since it becomes invalid as
 soon as the test execution exits it. It needs to be either defined statically/globally or managed using a
 shared pointer.
]

[bt_example example02..Nullary method of a class bound to global class instance and manually registered]
[bt_example example03..Nullary method of a class bound to shared class instance and manually registered]

If you do not need to reuse the test class instance and can't or do not wish to create test class
instance globally it may be easier and safer to create an instance on the stack of free function:

[bt_example example04..Nullary method of a class bound to local class instance inside free function]

If you have to perform the same set of tests with different sets of parameters you may want to base your test
case on a function with arguments and bind particular parameters during test case creation.

[warning
 If you bind parameters by reference or pointer, the referenced value can't have local storage in the
     test module initialization function.
]
 
The example below employs the alternative test module initialization function specification:

[bt_example example05..Binary free function bound to set of different parameter pairs]

The __UTF__ also presents an alternative method for parameterized test case creation, which is covered in 
[link ref_BOOST_PARAM_TEST_CASE next section].

[endsect]

[/EOF]
