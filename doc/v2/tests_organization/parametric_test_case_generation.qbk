[section:test_case_generation Generation of test case parameters]

In some circumstance, one would like to test a [link boost_test.tests_organization.test_cases.test_organization_unary parametrized] 
test over a large set of parameters. __BOOST_PARAM_TEST_CASE__ provides an easy solution when these parameters can be described in 
some collection. However, this solution has also limitations

* Suppose we already have parametrized tests for two functions `func1` and `func2`. 
*

The __UTF__ provides a facility in order to ease the automated generations of these parameters.

The unit test toolbox is augmented with one new registration macro: __BOOST_DATA_TEST_CASE_WITH_PARAMS__. 

[section Datasets]
The power of the dataset object comes from

* the operations they provide for combination
* the generators provided
* their interface with other type of collections

A dataset is a collection of elements, that 

* is forward iterable
* can be queried for their `size`



[tip datasets are implemented in [classref boost::unit_test::data::monomorphic::dataset]]

[warning Only "monomorphic" datasets are supported, which means that all elements of the collection have the same type.]



[section Operations on dataset]
As mentionned earlier, one of the major aspects of using the __UTF__ datasets lies in the number of operations provided
for their combination.
 
[section Cartesian products]
The cartesian product, or ['grid], combines two datasets to form a new dataset of higher dimension. The iteration over
the resulting datasets creates pairs of values with types respectives to the initial datasets.



[endsect]


[section Joins]
A ['join] is the concatenation of two datasets. These datasets are required to have compatible types. 
[endsect]


[section Zips]
A ['zip] is the concatenation of two datasets. These datasets are required to have the same size.


``
#include <boost/test/unit_test.hpp>

#if BOOST_PP_VARIADICS

#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>
namespace data=boost::unit_test::data;

int samples1[] = {1,2};
char const* samples2[] = {"qwerty","asdfg"};

__BOOST_DATA_TEST_CASE__( test_name, data::make(samples1)^samples2, integer_values, string_value)
{
  std::cout << integer_values << ", " << string_value << std::endl;
}
#endif
``


[table:id_example_dataset_zipop Custom predicate support using __BOOST_LEVEL_PREDICATE__
  [
    [Code]
    [Output]
  ]
  [
    [``
#include <boost/test/unit_test.hpp>

#if BOOST_PP_VARIADICS

#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>
namespace data=boost::unit_test::data;

int samples1[] = {1,2};
char const* samples2[] = {"qwerty","asdfg"};

__BOOST_DATA_TEST_CASE__( test_name, data::make(samples1)^samples2, integer_values, string_value)
{
  std::cout << integer_values << ", " << string_value << std::endl;
}
#endif
``
]
    [blablablabla]
  ]
]


[endsect]

[endsect] [/ operations on dataset]




[section Datasets generators]
Several ['generators] are implemented in __UTF__. The purpose is to:

* ease the generation of data, even in large scale
* improve the readability and expressivity of the test cases



[section Ranges]

[endsect]


[section Random value generators]

[classref boost::unit_test::data::monomorphic::random_t]

[warning the random value generators are available only for C++11 capable compilers.]

[h3 Choosing the distribution]
The selection of the distibution may be given by the parameter `boost::unit_test::data::distribution`

The following defines a random value generator with Gaussian distribution (mean 5, sigma 2).
``
auto rdgen = boost::unit_test::data::random(data::distribution = std::normal_distribution<>(5.,2));
``

[h3 Setting the seed]
In order to be able to reproduce a failure within a randomized parameter test case, the seed that generated the failure may be
set in order to generate the same sequence of random values.

``
auto rdgen = boost::unit_test::data::random(data::seed = 100UL);
``

[endsect] [/ random]


[endsect] [/ Datasets generators]

[endsect] [/ datasets]

[section:datasets_auto_registration Test case with datasets]

``
BOOST_DATA_TEST_CASE_WITH_PARAMS
``

[endsect]

[endsect]