[/ -------------------------------------------------------------------------------------------------- ]
[section:log_compil_time_configuration Compile time configuration]

While many test log configuration tasks can be performed at runtime using predefined framework parameters, the
__UTF__ provides a compile time interface as well. The interface gives you full power over what, where and how to 
log. The interface is provided by singleton class ``boost::unit_test::unit_test_log_t`` and is
accessible through local file scope reference to single instance of this class

``boost::unit_test::unit_test_log``


[section:log_ct_output_stream_redirection Log output stream redirection]

If you want to redirect the test log output stream into something different from `std::cout` use the following
interface:

``
  boost::unit_test::unit_test_log.set_stream( std::ostream& str );
``

You can reset the output stream at any time both during the test module initialization and from within test
cases. There are no limitations on number of output stream resets either.

[import ../examples/example50.cpp]
[import ../examples/example50.output]
[table:id_example50 Compile-time log output redirection
  [
    [Code]
    [Output]
  ]
  [
    [[example50]]
    [[example50o]]
  ]
]


[warning
  If you redirect test log output stream from global fixture setup, you are [*required] to reset it back to `std::cout`
  during teardown to prevent dangling references access]

[endsect] [/section:log_ct_output_stream_redirection]




[#ref_log_level_explanations][section:log_ct_log_level Log level configuration]
If you need to enforce specific log level from within your test module use the following interface:

``
  boost::unit_test::unit_test_log.set_threshold_level( boost::unit_test::log_level );
``

In regular circumstances you shouldn't use this interface, since you not only override default log level, but also
the one supplied at test execution time. Prefer to use runtime parameters __param_log_level__ for log level selection.


[import ../examples/example51.cpp]
[import ../examples/example51.output]
[table:id_example51 Compile-time log level configuration
  [
    [Code]
    [Output]
  ]
  [
    [[example51]]
    [[example51o]]
  ]
]

[endsect] [/section:log_ct_log_level]


[section:log_ct_log_format Predefined log format selection]
The select at compile time the log format from the list of the formats supplied by the __UTF__

``
   boost::unit_test::unit_test_log.set_format( boost::unit_test::output_format );
``

In regular circumstances you shouldn't use this interface. Prefer to use runtime parameters for predefined log
format selection.

[import ../examples/example52.cpp]
[import ../examples/example52.output]
[table:id_example52 Compile-time log format selection
  [
    [Code]
    [Output]
  ]
  [
    [[example52]]
    [[example52o]]
  ]
]

[endsect] [/section:log_ct_log_format]

[#ref_log_formatter_api][section:custom_log_formatter Custom log format support]

[warning Check what to do on this one]

[endsect] [/section:custom_log_formatter]


[endsect] [/section:log_compil_time_configuration]