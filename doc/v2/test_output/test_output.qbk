[#ref_test_outputs][section:test_output Controlling the outputs]
The output produced by a test module is one of the major assets the __UTF__ brings to users. In comparison with any
kind of manual/assert based solution the __UTF__ provide following services:

* All test errors are reported uniformly[br]
  The test execution monitor along with standardized output from all included
  __testing_tools__ provides uniform reporting for all errors including fatal errors, like memory assess violation and uncaught exceptions.
* Detailed information on the source of an error[br]
  The __UTF__ test tool's based assertion provides as much information as possible about cause of error,
  usually  allowing you to deduce what is wrong without entering the debugger or core analysis.
* Separation of the test errors description (test log) from the results report summary (test results report)[br]
  The information produced during test execution, including all error, warning and info messages from the test
  tools, executed test units notification constitute the test log. By default all entries in the test log are
  directed to the standard output. Once testing is completed the __UTF__ may produce a summary test report with
  different levels of detail. The test report is by default directed to the standard error output.
* Flexibility in what is shown in the output[br]
  The __UTF__ provides the ability to configure what if shown in both the test log and the test report. The
  configuration is supported both at runtime, during test module invocation and at compile time from within a
  test module.
* Flexibility in how output is formatted[br]
  The __UTF__ provides the ability to configure the format of the test module output. At the moment only 2 formats
  are supported by the __UTF__ itself, the well defined public interface allows you to customize an output for
  your purposes almost any way you want.
  
  
[section Test log output]

The test log is produced during the test execution. All entries in the test log are assigned a particular log
level. Only the entries with level that exceeds the ['active log level threshold] actually
appear in the test log output. Log levels are arranged by the 'importance' of the log entries. Here is
the list of all levels in order of increasing 'importance':


[table:id_messages Messages
    [
      [Notifications]
      [Meaning]
    ]
    [
      [Success]
      [This category includes messages that provide information on successfully passed assertions]     
    ]
    [
      [Test tree traversal]
      [This category includes messages that are produced by the __UTF__ core and indicate which test suites/cases are currently being executed or skipped]
    ]
    [
      [General information]
      [This category includes general information massages produced in most cases by a test module author using the
       macro __BOOST_TEST_MESSAGE__]
    ]
    [
      [Warning]
      [This category includes messages produced by failed warning level assertions]
    ]
    [
      [Non fatal error]
      [This category includes messages produced by failed check level assertions]
    ]

    [
      [Uncaught C++ exceptions]
      [This category includes messages that are produced by the __UTF__ and provide detailed information on the C++
       exceptions uncaught by the test case body.
      ]
    ]
    [
      [Non-fatal system error]
      [This category includes messages that are produced by the __UTF__ itself and provides information about caught
       non-fatal system error. For example it includes messages produced in the case of test case timeout or if
       floating  point values calculation errors are caught.
      ]
   ]
   [
      [Fatal system error]
      [This category includes messages produced by failed require level assertions and by the __UTF__ itself in case of
       abnormal test case termination.]
   ]
]

[note 
    The active log level works namely as threshold, not as selector. For the given active log level threshold, all
    test log entries with ['importance] higher than threshold are enabled and all test log entries with
    ['importance] below threshold are disabled.
]

In addition to the levels described above the test log defines two special log levels. The current log level can
be set to:

* All messages[br]
  If active log level threshold is set to this value, all test log entries appear in the output. In practice
  this is equivalent to setting the active log level threshold to ['success information messages]
* Nothing[br]
  If the active log level threshold is set to this value, none of test log entries appear in the output. This log level
  is used to execute a ['silent] test that doesn't produce any test log and only generates a result code indicating whether test failed or passed.


By default the active log level threshold is set to "non fatal error messages" and the test log output
is generated in the human readable format. The active log level threshold and the output format can be configured
at runtime during a test module invocation and at compile time from within a test module using the test log
public interfaces. For example, for automated test module output processing it might be more convenient to use
the XML based format.

In most cases, the __UTF__ can't provide an exact location, where system error occurs or uncaught C++ exception
is thrown from. To be able to pinpoint it as close as possible the __UTF__ keeps track of checkpoints - the
location a test module passed through. A test case entrance and exit points, a test tool invocation point the
__UTF__ tracks automatically. Any other checkpoints should be entered by you manually. The test log provides two
macros for this purpose:

* __BOOST_TEST_CHECKPOINT__ to specify a ['named] checkpoint and 
* __BOOST_TEST_PASSPOINT__ to specify an ['unnamed] checkpoint.


[endsect] [/test_output]



[/ -------------------------------------------------------------------------------------------------- ]
[section:log_runtime_config Configuring the verbosity of the logs]

The active log level threshold can be configured at runtime using the parameter __param_log_level__. 
The test log output format can be selected using either parameter __param_log_format__ or the
parameter __param_output_format__.


[endsect] [/section:log_runtime_config]


[/ -------------------------------------------------------------------------------------------------- ]

[section:testing_tool_output_disable Disabling automatic printing for specific types]

Most of the __testing_tools__ print values of their arguments to the output
stream in some form of log statement. If arguments type does not support 
``
  operator<<(std::ostream&, ArgumentType const&);
``
interface you will get a compilation error. You can either implement above interface or prohibit the __testing_tools__ from logging argument values for
specified type. To do so, use following statement on file level before first test case that includes statement
failing to compile:

``
  BOOST_TEST_DONT_PRINT_LOG_VALUE(ArgumentType)
``

[import ../examples/example32.cpp]
[import ../examples/example32.output]
[table:id_example32 BOOST_TEST_DONT_PRINT_LOG_VALUE usage
  [
    [Code]
    [Output]
  ]
  [
    [[example32]]
    [[example32o]]
  ]
]

[endsect]






[/ -------------------------------------------------------------------------------------------------- ]

[section:test_output_macro_message `BOOST_TEST_MESSAGE`]
The macro __BOOST_TEST_MESSAGE__ is intended to be used for the purpose of injecting an additional message into the
__UTF__ test log. These messages are not intended to indicate any error or warning conditions, but rather as
information/status notifications. The macro signature is as follows:

  __BOOST_TEST_MESSAGE__(test_message);

The test_message argument can be as simple as C string literal or any custom expression that you can produce
with in a manner similar to standard `std::iostream` operation.

[important Messages generated by this tool do not appear in test log output with default value of the active log level
   threshold. For these messages to appear the active log level threshold has to be set to a value below or equal
   to "message".
]

[import ../examples/example21.cpp]
[import ../examples/example21.output]
[table:id_example21 __BOOST_TEST_MESSAGE__ usage
  [
    [Code]
    [Output]
  ]
  [
    [[example21]]
    [[example21o]]
  ]
]

[endsect] [/section:log_test_messages]




[/ -------------------------------------------------------------------------------------------------- ]
[section:test_output_macro_checkpoint `BOOST_TEST_CHECKPOINT`]


The macro __BOOST_TEST_CHECKPOINT__ is intended to be used to inject [*named] checkpoint position. The
macro signature is as follows:

``
  __BOOST_TEST_CHECKPOINT__(checkoint_message);
``

The message formatted at the checkpoint position is saved and reported by the exception logging functions (if any
occurs). Similarly to the __BOOST_TEST_MESSAGE__ the message can be formatted from any standard
output stream compliant components.


[import ../examples/example22.cpp]
[import ../examples/example22.output]
[table:id_example22 __BOOST_TEST_CHECKPOINT__ usage
  [
    [Code]
    [Output]
  ]
  [
    [[example22]]
    [[example22o]]
  ]
]
[endsect] [/section:log_test_checkpoint]






[/ -------------------------------------------------------------------------------------------------- ]
[section:test_output_macro_passpoint `BOOST_TEST_PASSPOINT`]

The macro __BOOST_TEST_PASSPOINT__ is intended to be used to inject an [*unnamed] checkpoint position. The
macro signature is as follows:

  __BOOST_TEST_PASSPOINT__();


Unlike the macro __BOOST_TEST_CHECKPOINT__ this macro doesn't require any message to be
supplied with it. It's just a simple "been there" marker that records file name and line number
code passes through.

[import ../examples/example23.cpp]
[import ../examples/example23.output]
[table:id_example23 __BOOST_TEST_PASSPOINT__ usage
  [
    [Code]
    [Output]
  ]
  [
    [[example23]]
    [[example23o]]
  ]
]
[endsect] [/section:log_test_passpoint]





[include logging_floating_point.qbk]

[include log_format.qbk]
[include compilation_options.qbk]


[#ref_tests_report][section Test reports]
[warning Section empty]
[endsect]

[include progression_display.qbk]


[endsect] 

