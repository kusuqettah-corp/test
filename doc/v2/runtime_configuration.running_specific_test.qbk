[section Running specific test units selected by their name]
In regular circumstances, test module execution initiates testing of all test units manually or automatically 
registered in master test suite. 

# The __UTF__ provides an ability to run specific set of test unit as well. It can be 
  single test case, single test suite or some combination of test cases and suites. The tests units to run are 
  selected by the runtime parameter __param_run_test__. 
# Symbol `,` is used to create list of test units residing on the same level in test tree
# Filter expressions are specified in a form `a/b/c`, where `a`, `b` and `c` are filters for corresponding levels of test tree. 
  Symbol `*` can be used at the beginning, at the end and as the level filter itself as an asterisk. 



In the following examples, I select tests to run using command line arguments, but the same filter expression can be used as 
an appropriate environment variable value.


Let's consider following test module consisting from several test suites and test cases:

[\ snippet 18 deleted]

``
#define BOOST_TEST_MODULE example
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE( testA ) {}
BOOST_AUTO_TEST_CASE( testB ) {}

BOOST_AUTO_TEST_SUITE( s1 )
  BOOST_AUTO_TEST_CASE( test1 ) {}
  BOOST_AUTO_TEST_CASE( lest2 ) {}
BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE( s2 )
  BOOST_AUTO_TEST_CASE( test1 ) {}
  BOOST_AUTO_TEST_CASE( test11 ){}
  
  BOOST_AUTO_TEST_SUITE( in )
    BOOST_AUTO_TEST_CASE( test ){}
  BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()
``

[table
  [
    [Description]
    [Command]
    [Example]
  ]
  [
    [Run single test case by specifying it's name]
    [__param_run_test__=<test-case-name>]
    [
``
$ example --log_level=test_suite --__param_run_test__=testA
Running 1 test case...
Entering test suite "example"
Entering test case "testA"
Test case testA doesn't include any assertions
Leaving test case "testA"
Leaving test suite "example"

*** No errors detected
``    
    ]
  ]
  [
    [Run multiple test cases residing within the same test suite by listing their names in coma separated list]
    [__param_run_test__=<test-case-name1>,<test-case-name2>,...]
    [
``
$ example --log_level=test_suite --__param_run_test__=testA,testB
Running 2 test case...
Entering test suite "example"
Entering test case "testA"
Test case testA doesn't include any assertions
Leaving test case "testA"
Entering test case "testB"
Test case testA doesn't include any assertions
Leaving test case "testB"
Leaving test suite "example"

*** No errors detected    
``
    ]
  ]
  
  [
    [Run all test units within the referred test suites]
    [__param_run_test__=<test-suite-name1>,<test-suite-name2>,...]
    [
``
$ example --log_level=test_suite --__param_run_test__=s1
Running 2 test cases...
Entering test suite "example"
Entering test suite "s1"
Entering test case "test1"
Test case test1 doesn't include any assertions
Leaving test case "test1"
Entering test case "lest2"
Test case lest2 doesn't include any assertions
Leaving test case "lest2"
Leaving test suite "s1"
Leaving test suite "example"

*** No errors detected
``
    ]
  
  ]
  
  [
    [Run a specific test inside a test tree using `/`]
    [__param_run_test__=<test-suite-hierarchy-level1>/<test-suite-hierarchy-level2>/.../<test-case>]
    [

``
$ example --log_level=test_suite --__param_run_test__=s2/in/test
Running 1 test case...
Entering test suite "example"
Entering test suite "s2"
Entering test suite "in"
Entering test case "test"
Test case test doesn't include any assertions
Leaving test case "test"
Leaving test suite "in"
Leaving test suite "s2"
Leaving test suite "example"

*** No errors detected
`` 
    ]
  ]
  
]



[warning Incorrect test case name may lead to no test to be run

``
$ example --log_level=test_suite --__param_run_test__=testC
Test setup error: no test cases matching filter
]


The __UTF__ supports simple regular expression-like `*` wildcard. Single `*` match any name of test unit. Accordingly
expression 's1/*' is equivalent to the expression `s1` and matches all test units inside test suite `s1`. Similarly 
expression `*/test1` refers to all test units named `test1` that reside in master test suite's direct child suites.

`` 
$ example --log_level=test_suite --__param_run_test__=*/test1
Running 2 test cases...
Entering test suite "example"
Entering test suite "s1"
Entering test case "test1"
Test case test1 doesn't include any assertions
Leaving test case "test1"
Leaving test suite "s1"
Entering test suite "s2"
Entering test case "test1"
Test case test1 doesn't include any assertions
Leaving test case "test1"
Leaving test suite "s2"
Leaving test suite "example"

*** No errors detected
`` 


The __UTF__ allows to match specific prefix in test unit names. For example, expression `s2/test*` filters out only 
test units in test suite `s2` with name that starts with `test`. This avoids running the test suite `s2/in`.

`` 
$ example --log_level=test_suite --__param_run_test__=s2/test*
Running 2 test cases...
Entering test suite "example"
Entering test suite "s2"
Entering test case "test1"
Test case test1 doesn't include any assertions
Leaving test case "test1"
Entering test case "test11"
Test case test11 doesn't include any assertions
Leaving test case "test11"
Leaving test suite "s2"
Leaving test suite "example"

*** No errors detected
``


The __UTF__ allows to match specific suffix in test unit names. For example, expression '*/*1' filters out test units
with name that ends with '1' and reside in master test suite's direct child suites.

``
$ example --log_level=test_suite --__param_run_test__=*/*1
Running 2 test cases...
Entering test suite "example"
Entering test suite "s2"
Entering test case "test1"
Test case test1 doesn't include any assertions
Leaving test case "test1"
Entering test case "test11"
Test case test11 doesn't include any assertions
Leaving test case "test11"
Leaving test suite "s2"
Leaving test suite "example"

*** No errors detected
``


Finally, the __UTF__ allows to match specific substring in test unit names.

$ example --log_level=test_suite --__param_run_test__=s1/*est*
Running 2 test cases...
Entering test suite "example"
Entering test suite "s1"
Entering test case "test1"
Test case test1 doesn't include any assertions
Leaving test case "test1"
Entering test case "lest2"
Test case lest2 doesn't include any assertions
Leaving test case "lest2"
Leaving test suite "s1"
Leaving test suite "example"

*** No errors detected</screen>

[endsect]
