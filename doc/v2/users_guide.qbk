[/
 / Copyright (c) 2003-2014 Gennadiy Rozental 
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[/ ##################################################################### ]
[section:users_guide The __UTF__ User's Guide]

Without further ado, I'd like to start ... but where? It's not obvious what is the best order to describe
the framework. One can use bottom up approach, starting with with basics and going up to cover real 
interfaces based on them. The downside is that you'll have to dig through the multiple pages of information
you may not never need in real life. One can follow the order of test program execution. From test 
initialization to test tree construction to the report and log generation. This also unfortunately may not
be most clear way. The Boost.Test __UTF__ is very flexible and a lot of details of various test 
initialization options may not necessarily be important for average user, while understanding test output
is.

Well ... This is a User's Guide after all. Let's go by what *you*, as a user, need to know to 
successfully use the __UTF__. Thus I follow the order of decisions you have to make and order
of complexity of the problems you might encounter. If you find yourself faced with some unclear term feel 
free to jump directly to the [link boost_test.section_glossary Glossary] section, where short definitions 
for all used terms were collected. And if you want to jump right into coding the 
[link boost_test.tutorials Tutorials] section would be a better place to start.

The __UTF__ has several usage variants. And the first decision you have to make is which one to use. These
variants are covered in section dedicated to [link boost_test.users_guide.usage_variants Usage variants]. 
The next step, probably the most important for you, is to start writing test cases, bind them in test 
suites and implement your checks. First two topics are covered in 
[link boost_test.users_guide.tests_organization Tests organization] section, while
__testing_tools__ section arms you with rich set of tools enough to implement almost arbitrary check you need.

Next you'll learn how to understand and manipulate the __UTF__ output in a __test_outputs__ section. 
At that point you should be able to build and run most simple test modules and almost inevitable find a need
to configure how the test module is executed. Whether you want to change output format, select which test 
case to run or run test cases in random order these and may other runtime configuration parameters are 
described in [*Runtime configuration] section.

One of the first non trivial things you might want to add to your test module is test fixture. Fixture
support is covered in __section_test_fixture__ section. Usually the default test module initialization
will work just fine, but if you want to implement some custom initialization or change how default 
initialization behaves you need to first look in [*Test module initialization] section. Here you'll learn
about various options the __UTF__ provides for you to customize this behaviour.

Finally you might want to learn about how the __UTF__ implements entry points into the test modules. This
is especially important if you intend to implement the `main` function yourself and not use the one 
provided by the __UTF__. The [*Test runners] section covers this subject. Different usage variants employ
slightly different approached to implementing test module entry points and presents slightly different
interfaces. This section intended for advanced user some of the details of the implementation are described
there.

[/ intro into usage variants]
[include usage_variants.qbk]

[/ organizing, generating and registering tests]
[include test_organization/test_organization.qbk]

[/ creating assertions]
[include testing_tools/testing_tools.qbk]

[/ controlling outputs]
[include test_output/test_output.qbk]

[/ command line + environment options]
[include runtime_configuration/runtime_configuration.qbk]

[endsect] [/User's guide]

[/ EOF]
