[/
 / Copyright (c) 2015 Raffi Enficiaud
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:tests_dependencies Managing test dependencies]

Dependencies among tests are managed by means of [link boost_test.tests_organization.decorators decorators]. 
Two types of dependencies can be handled by the __UTF__:

* the order of execution of the tests
* the conditional run of a test dependending on the status or a function/predicate of the parent tests


[/-----------------------------------------------------------------]

[section:decorator_depends_on depends_on (decorator)]

``
depends_on(const_string dependent_test_name);
``

Decorator `depends_on` associates the decorated test case (call it `B`) with another test case (call it `A`) specified 
by name. This affects the processing the test tree in two ways. First, test case `A` is ordered to be run before `B`, 
irrespective of the order in which they were declared or added to the test tree. Second, the execution of `B` is 
skipped if `A` is either disabled or skipped or is executed and marked as failed. 

[bt_example decorator_07..decorator depends_on]

In the above scenario, test case `test3` is run (and fails) because `s1/test1` has been run and succeeded; `test4` is 
skipped because `test3` has failed; `test5` is skipped because `s1/test2` is disabled.

[endsect] [/ section decorator_depends_on]

[/-----------------------------------------------------------------]

[section:decorator_precondition precondition (decorator)]

[def __class_assertion_result__ [classref boost::test_tools::assertion_result test_tools::assertion_result]]
``
typedef boost::function<__class_assertion_result__ (test_unit_id)> predicate_t;

precondition(predicate_t predicate);
``
Decorator `precondition` associates a ['predicate] with a test unit. Before the test unit is executed, the predicate 
is evaluated with the test unit's ID passed as the argument. If it evaluates to `false`, execution of the test unit is 
skipped. Skipping the test suite means skipping the execution of every test unit inside.

[bt_example decorator_08..decorator precondition]

In the example above, the user defined a custom predicate `if_either` that evaluates to `true` if at least one of the 
two specified tests passed. (It assumes that the tests are registered in the specific order.) Test case `test3` has a 
precondition that at either `test1` or `test2` passed. The precondition is satisfied, therefore `test3` is run 
(and fails). Test case `test4` has a precondition that either `test2` or `test3` passed. Since they both failed, the 
precondition is not satisfied, therefore `test4` is skipped.
 
[endsect] [/ section decorator_precondition]

[/-----------------------------------------------------------------]


[endsect]
