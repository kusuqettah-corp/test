[/
 / Copyright (c) 2015 Raffi Enficiaud
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:tests_dependencies Managing test dependencies]

Dependencies among tests are managed by means of [link boost_test.tests_organization.decorators decorators]. 
Dependencies in the __UTF__ affect two dimensions of test units, which are:

* the order of execution of these units
* the execution of a test unit, which is conditionned by the state of its parents


The decorator __decorator_depends_on__ associates the decorated test case (call it `B`) with another test case (call it `A`) specified 
by name. This affects the processing the test tree in two ways. First, test case `A` is ordered to be run before `B`, 
irrespective of the order in which they were declared or added to the test tree. Second, the execution of `B` is 
skipped if `A` is either disabled or skipped or is executed and marked as failed. 

[bt_example decorator_07..decorator depends_on]

In the above scenario, test case `test3` is run (and fails) because `s1/test1` has been run and succeeded; `test4` is 
skipped because `test3` has failed; `test5` is skipped because `s1/test2` is disabled.






[/-----------------------------------------------------------------]


[endsect]
