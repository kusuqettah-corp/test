[/
 / Copyright (c) 2003 Boost.Test team 
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:tests_organization Declaring and organizing tests]

If you look at many legacy test modules, big chance is that it's implemented as one big test function that
consists of a mixture of check and output statements. Is there anything wrong with it? Yes. There are various
disadvantages in single test function approach:

* One big function tends to become really difficult to manage if the number of checks exceeds a reasonable limit
  (true for any large function). What is tested and where - who knows?
* Many checks require similar preparations. This results in code repetitions within the test function.
* If a fatal error or an exception is caused by any checks within the test function the rest of tests are
  skipped and there is no way to prevent this.
* No way to perform only checks for a particular subsystem of the tested unit.
* No summary of how different subsystems of the tested unit performed under in the test.

The above points should make it clear that it's preferable to split a [link ref_test_module test module] into smaller units.
These units are the *test cases*.

[variablelist Subjects covered by this section
  [
    [Declaration]
    [The __UTF__ supports several methods for declaring a [link boost_test.tests_organization.test_cases test case].
    Test cases might be implemented by free functions, function object, with or without parameters/data, and as template functions
    to be run against various types. ]
  ]
  [ 
    [Organization]
    [The __UTF__ provides facilities to group several test cases into [link boost_test.tests_organization.test_suite test suites]. 
    The test suites can be nested, and the set of test suites and test cases defines the /test tree/, where the leaves are the test cases.
    The __UTF__ provides control over the test cases and test suites (descriptive, run-time, ...), which allow a precise 
    organization of the test tree into units suitable to the users.]
  ]
  [
    [Attributes]
    [It is possible to declare /attributes/ for test unit by using [link boost_test.tests_organization.decorators decorators].
     Those attributes allow a fine grained control over several aspects of test-units, such as /logical grouping/, /dependencies/, 
     /expected failures/, etc.]
  ]
  [
    [Pre/post test unit actions]
    [When several tests shares the same set-up (environment, test data preparation, etc.), the 
     [link boost_test.tests_organization.fixtures fixtures] comes into play. 
     In the __UTF__, fixtures can be defined at the test case or the test suite level.
    ]
  ]
]

[include test_cases.qbk]
[include test_suites.qbk]
[include decorators.qbk]
[include fixtures.qbk]
[include managing_tests_dependencies.qbk]
[include logical_grouping.qbk]
[include test_enabling_disabling.qbk]
[include semantic.qbk]
[include testorg_summary.qbk]


[endsect] [/ test organization]

[/EOF]
