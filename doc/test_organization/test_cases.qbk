[/
 / Copyright (c) 2003-2014 Gennadiy Rozental 
 / Copyright (c) 2013-2014 Raffi Enficiaud
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]


[section:test_cases Test cases]
A test case is a unit of execution that is ran by the [link test_runner test runner]. It contains instructions and 
[link boost_test.testing_tools.boost_test_super_macro assertions], and its execution is monitored by the __UTF__. 
Informations about the execution are recorded, and a log/report is produced. 

The test runner should be informed of the test case in order to run it: the test case should be *registered* for its 
inclusion into the /test tree/. 

The __UTF__ covers the following test case scenarios:

* *test cases without parameters*: those are similar to the run of a function in the controlled environment of the test runner.
* *test cases with parameters*: this usage is intended to run the same function with potentially many different parameters,
  each call with a different parameter being handled by the test runner.
* *test cases on template*: the scenario is to test the same template implementation against several type.

The test case have a different *declaration* for each of the above scenarios. 

Several tools are provided for /declaring/ *and* /registering/ a test cases, automatically, at the same time and in-place. 
The use of those tools is the recommanded approach. 

[h4 Manual registration]
It is also possible to declare tests manually. In that regards, the design choices of __UTF__ were oriented to be the least intrusive
and opted for a ['generic callback] approach, which signatures depends on the test case scenario. 

[caution Generic test case construction design used by the __UTF__ allows the test case implementation (test function body)
and test case creation/registration points to be remote. As a result you may forget to register the test case
and it's never going to be executed, even though it's present in test file. ]

The single test module may mix both automated and manual test case
registration. In other words, within the same test module you can have both test cases implemented remotely and
registered manually in the test module initialization function and test cases that are registered automatically at
implementation point.


[/ ############################################# ]
[include nullary_tests.qbk]

[/ ############################################# ] 
[include parametric_test_case_generation.qbk]

[/ ############################################# ] 
[include typed_parametrized_tests.qbk]

[/ ############################################# ]
[include unary_tests.qbk]


[endsect] [/ test cases]

[/EOF]
